package net.jangaroo.jooc.mvnplugin;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.project.MavenProject;
import org.apache.maven.project.MavenProjectHelper;
import org.codehaus.mojo.javascript.archive.JavascriptArchiver;
import org.codehaus.mojo.javascript.archive.Types;
import org.codehaus.plexus.archiver.ArchiveFileFilter;
import org.codehaus.plexus.archiver.ArchiveFilterException;

import java.io.File;
import java.io.InputStream;
import java.util.Collections;

/**
 * Creates the jangaroo and janagaroo sources archives and attaches them to the project.<br>
 * The jangaroo archive is created by zipping the <code>${project.build.outputDirectory}</code>
 * and ommiting all ActionScript files.
 *
 * The <code>package</code> goal is executed in the <code>package</code> phase of the jangaroo lifecycle. 
 *
 * @goal package
 * @phase package
 */
public class PackageMojo extends AbstractMojo {
  /**
   * The maven project.
   *
   * @parameter expression="${project}"
   * @required
   * @readonly
   */
  private MavenProject project;

  /**
   * Destination directory for the Maven artifacts (*.jar and *-sources.jar). Default is <code>
   * ${project.build.directory}</code>
   * @parameter expression="${project.build.directory}"
   */
  private File targetDir;

  /**
   * @component
   */
  MavenProjectHelper projectHelper;

  /**
   * The output directory of the AS->JS compilation process. Default is ${project.build.outputDirectory}
   *
   * @parameter default-value="${project.build.outputDirectory}"
   */
  private File outputDirectory;


  /**
   * Source directory to scan for files to package in the sources archive. These files
   * have not been compiled since these classes are available by default. They are needed
   * to make them available via IDE and for the asdoc generations.
   * Defaults to ${basedir}/src/main/joo-api
   *
   * @parameter default-value="${basedir}/src/main/joo-api"
   */
  private File jooApiDirectory;


  /**
   * The filename of the merged javascript file generated by the Jooc. Defaults to ${project.artifactId}
   *
   * @parameter default-value="${project.build.finalName}"
"
   */
  private String finalName;

  /**
   * Plexus archiver.
   *
   * @component role="org.codehaus.plexus.archiver.Archiver" role-hint="jangaroo"
   * @required
   */
  private JavascriptArchiver archiver;

  /**
   * @parameter
   */
  private File manifest;

  /**
   * Location of the compiled scripts files. Defaults to ${project.build.directory}/joo/
   *
   * @parameter expression="${project.build.directory}/joo/"
   */
  private File compilerOutputDirectory;

  public void execute()
          throws MojoExecutionException {
    File jsarchive = new File(targetDir, finalName + "." + Types.JAVASCRIPT_EXTENSION);
    try {
      if (manifest != null) {
        archiver.setManifest(manifest);
      } else {
        archiver.createDefaultManifest(project);
      }
      archiver.setArchiveFilters(Collections.singletonList(new ArchiveFileFilter() {
        @Override
        public boolean include(InputStream dataStream, String entryName) throws ArchiveFilterException {
          return !entryName.endsWith(".as");
        }
      }));
      if (compilerOutputDirectory.exists()) {
        archiver.addDirectory(compilerOutputDirectory);
      }

      String groupId = project.getGroupId();
      String artifactId = project.getArtifactId();
      archiver.addFile(project.getFile(), "META-INF/maven/" + groupId + "/" + artifactId
              + "/pom.xml");
      archiver.setDestFile(jsarchive);
      archiver.createArchive();
      archiver.reset();
    }
    catch (Exception e) {
      throw new MojoExecutionException("Failed to create the javascript archive", e);
    }
    project.getArtifact().setFile(jsarchive);
/*    getLog().info("Adding " + jooApiDirectory + " to compileSourceRoots");
    project.addCompileSourceRoot(jooApiDirectory.getPath());      */

  }
}
