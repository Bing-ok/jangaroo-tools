package net.jangaroo.jooc.mvnplugin;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.project.MavenProject;
import org.apache.maven.project.MavenProjectHelper;
import org.codehaus.mojo.javascript.archive.JavascriptArchiver;
import org.codehaus.mojo.javascript.archive.Types;

import java.io.File;

/**
 * Creates the jangaroo and janagaroo sources archives and attaches them to the project.<br>
 * The janagroo archive is created by zipping the <code>${project.build.outputDirectory}</code> the
 * janagroo sources archive (containing the action script files) is generated by zipping three
 * directories:
 * <ul>
 *   <li><code>${project.build.directory}/joo/</code></li>
 *   <li><code>${project.build.directory}/generated-sources/joo</code></li>
 *   <li><code>${project.build.sourceDirectory}</code></li>
 * </ul>
 * <br>
 * The <code>package</code> goal is executed in the <code>package</code> phase of the jangaroo lifecycle. 
 *
 * @goal package
 * @phase package
 */
public class PackageMojo extends AbstractMojo {
  /**
   * The maven project.
   *
   * @parameter expression="${project}"
   * @required
   * @readonly
   */
  private MavenProject project;

  /**
   * Destination directory for the Maven artifacts (*.jar and *-sources.jar). Default is <code>
   * ${project.build.directory}</code>
   * @parameter expression="${project.build.directory}"
   */
  private File targetDir;

  /**
   * @component
   */
  MavenProjectHelper projectHelper;

  /**
   * The output directory of the AS->JS compilation process. Default is ${project.build.outputDirectory}
   *
   * @parameter default-value="${project.build.outputDirectory}"
   */
  private File outputDirectory;


  /**
   * Source directory to scan for files to package in the sources archive. These files
   * have been compiled. Defaults is ${project.build.sourceDirectory}.
   *
   * @parameter default-value="${project.build.sourceDirectory}"
   */
  private File sourceDirectory;

  /**
   * Output directory for all ActionScript3 files generated out of exml components.
   * Default is ${project.build.directory}/generated-sources/joo
   *
   * @parameter default-value="${project.build.directory}/generated-sources/joo"
   */
  private File generatedSourcesDirectory;

  /**
   * Source directory to scan for files to package in the sources archive. These files
   * have not been compiled since these classes are available by default. They are needed
   * to make them available via IDE and for the asdoc generations.
   * Defaults to ${basedir}/src/main/joo-api
   *
   * @parameter default-value="${basedir}/src/main/joo-api"
   */
  private File jooApiDirectory;


  /**
   * The filename of the merged javascript file generated by the Jooc. Defaults to ${project.artifactId}
   *
   * @parameter default-value="${project.artifactId}"
   */
  private String finalName;

  /**
   * Plexus archiver.
   *
   * @component role="org.codehaus.plexus.archiver.Archiver" role-hint="jangaroo"
   * @required
   */
  private JavascriptArchiver archiver;

  /**
   * Plexus archiver.
   *
   * @component role="org.codehaus.plexus.archiver.Archiver" role-hint="jangaroo"
   * @required
   */
  private JavascriptArchiver sourceArchiver;

  /**
   * @parameter
   */
  private File manifest;

  /**
   * Location of the compiled scripts files. Defaults to ${project.build.directory}/joo/
   *
   * @parameter expression="${project.build.directory}/joo/"
   */
  private File compilerOutputDirectory;

  public void execute()
          throws MojoExecutionException {
    File jsarchive = new File(targetDir, finalName + "." + Types.JAVASCRIPT_EXTENSION);
    try {
      if (manifest != null) {
        archiver.setManifest(manifest);
      } else {
        archiver.createDefaultManifest(project);
      }
      if (compilerOutputDirectory.exists()) {
        archiver.addDirectory(compilerOutputDirectory);
      }

      String groupId = project.getGroupId();
      String artifactId = project.getArtifactId();
      archiver.addFile(project.getFile(), "META-INF/maven/" + groupId + "/" + artifactId
              + "/pom.xml");
      archiver.setDestFile(jsarchive);
      archiver.createArchive();
      archiver.reset();
    }
    catch (Exception e) {
      throw new MojoExecutionException("Failed to create the javascript archive", e);
    }
    project.getArtifact().setFile(jsarchive);

    if (sourceDirectory.exists() && sourceDirectory.list().length != 0 ||
            generatedSourcesDirectory.exists() && generatedSourcesDirectory.list().length != 0 ||
            jooApiDirectory.exists() && jooApiDirectory.list().length != 0) {
      File asarchive = new File(targetDir, finalName + "-sources." + Types.JAVASCRIPT_EXTENSION);
      try {
        if (manifest != null) {
          sourceArchiver.setManifest(manifest);
        } else {
          sourceArchiver.createDefaultManifest(project);
        }
        if (sourceDirectory.exists()) {
          sourceArchiver.addDirectory(sourceDirectory);
        } else {
          getLog().debug("The sourceDirectory " + sourceDirectory + " does not exist.");
        } 
        if (generatedSourcesDirectory.exists()) {
          sourceArchiver.addDirectory(generatedSourcesDirectory);
        } else {
          getLog().debug("The generatedSourcesDirectory " + generatedSourcesDirectory + " does not exist.");
        } 
        if (jooApiDirectory.exists()) {
          sourceArchiver.addDirectory(jooApiDirectory);
        } else {
          getLog().debug("The jooApiDirectory " + jooApiDirectory + " does not exist.");
        }
        String groupId = project.getGroupId();
        String artifactId = project.getArtifactId();
        sourceArchiver.addFile(project.getFile(), "META-INF/maven/" + groupId + "/" + artifactId
                + "/pom.xml");
        sourceArchiver.setDestFile(asarchive);
        sourceArchiver.createArchive();
        sourceArchiver.reset();
      }
      catch (Exception e) {
        throw new MojoExecutionException("Failed to create the actionscript archive", e);
      }
      projectHelper.attachArtifact(project, "jar"/*Types.JANGAROO_TYPE*/, "sources", asarchive);
    }
  }
}
