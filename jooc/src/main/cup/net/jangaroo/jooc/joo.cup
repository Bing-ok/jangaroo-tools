/*
 * Copyright 2008 CoreMedia AG
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS
 * IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

/*
 * JangarooScript LALR(1) Grammar for the CUP parser generator
 *
 * Authors: Andreas Gawecki, Frank Wienberg
 */

package net.jangaroo.jooc;

import java_cup.runtime.*;
import java.util.ArrayList;

parser code  {:

  class FatalSyntaxError extends RuntimeException {
    FatalSyntaxError(String msg) {
      super(msg);
    }
  }

  CompileLog log;

  public void setCompileLog(CompileLog log) {
    this.log = log;
  }

  public void report_error(String message, Object info) {
    if (info instanceof JooSymbol) {
      log.error((JooSymbol) info, message);
    } else {
      log.error("Error: " + message);
    }
  }

  public void unrecovered_syntax_error(Symbol cur_token) {
    //report_error(message, info);
    done_parsing();
    throw new FatalSyntaxError("Fatal Syntax Error");
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    done_parsing();
    throw new FatalSyntaxError("Fatal Syntax Error");
  }

  public void syntax_error(Symbol cur_token) {
    report_error("Syntax error: " + scanner.getSymbolAbbreviation(cur_token.sym), cur_token);
  }

  protected Scanner scanner;

  public void setScanner(java_cup.runtime.Scanner s) {
    super.setScanner(s);
    scanner = (Scanner) s;
  }

:}

terminal JooSymbol AS;
terminal JooSymbol BREAK;
terminal JooSymbol CASE, CATCH, CLASS, CONST, CONTINUE;
terminal JooSymbol DEFAULT, DELETE, DO;
terminal JooSymbol ELSE, EXTENDS;
terminal JooSymbol FINALLY, FOR, FUNCTION;
terminal JooSymbol IF, IMPLEMENTS, IMPORT, IN, INSTANCEOF, INTERFACE, INTERNAL, IS;
terminal JooSymbol NEW;
terminal JooSymbol PACKAGE, PRIVATE, PROTECTED, PUBLIC;
terminal JooSymbol RETURN;
terminal JooSymbol SUPER, SWITCH;
terminal JooSymbol THIS, THROW, TRY, TYPEOF;
terminal JooSymbol USE;
terminal JooSymbol VAR, VOID;
terminal JooSymbol WHILE, WITH;

terminal JooSymbol REST;
terminal JooSymbol PLUSPLUS, MINUSMINUS, PLUS, MINUS, NOT, DIV, MOD, MUL;
terminal JooSymbol LSHIFT, RSHIFT, URSHIFT;
terminal JooSymbol LT, GT, LTEQ, GTEQ;
terminal JooSymbol EQ, EQEQ, EQEQEQ, NOTEQ, NOTEQEQ;
terminal JooSymbol AND, BITNOT, XOR, OR, ANDAND, OROR;
terminal JooSymbol QUESTION, COLON, SEMICOLON, COMMA, DOT;
terminal JooSymbol MULTEQ, DIVEQ, MODEQ, PLUSEQ, MINUSEQ;
terminal JooSymbol NAMESPACESEP;
terminal JooSymbol LSHIFTEQ, RSHIFTEQ, URSHIFTEQ;
terminal JooSymbol ANDEQ, XOREQ, OREQ;
terminal JooSymbol LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK;

terminal JooSymbol INT_LITERAL;
terminal JooSymbol FLOAT_LITERAL;
terminal JooSymbol BOOL_LITERAL;
terminal JooSymbol STRING_LITERAL;
terminal JooSymbol IDE;
terminal JooSymbol NULL_LITERAL;
terminal JooSymbol REGEXP_LITERAL;

// pseudo-terminals for precedence setting, never returned from scanner:
terminal JooSymbol PREFIX_PLUSPLUS, PREFIX_MINUSMINUS, PREFIX_PLUS, PREFIX_MINUS;

// pseudo-terminal carried in Scanner.ScanError, never returned by scanner:
terminal JooSymbol SCAN_ERROR;

nonterminal CommaSeparatedList arguments;
nonterminal ParenthesizedExpr arrayLiteral;
nonterminal BlockStatement block;
nonterminal ArrayList catches;
nonterminal Catch catchClause;
nonterminal ClassBody classBody;
nonterminal Expr commaExpr;
nonterminal ArrayList classBodyDeclarations;
nonterminal Declaration classBodyDeclaration;
nonterminal ClassDeclaration classDeclaration;
nonterminal CompilationUnit compilationUnit;
nonterminal IdeDeclaration compilationUnitDeclaration;
nonterminal JooSymbol constOrVar;
nonterminal Expr expr;
nonterminal Expr exprOrObjectLiteral;
nonterminal Extends extends;
nonterminal FieldDeclaration fieldDeclaration;
nonterminal FieldDeclaration optNextFieldDeclaration;
nonterminal FunctionExpr anonFunctionExpr;
nonterminal FunctionExpr namedFunctionExpr;
nonterminal Ide ide;
nonterminal Implements implements;
nonterminal Implements interfaceExtends;
nonterminal Node directive;
nonterminal ArrayList optDirectives;
nonterminal Expr lvalue;
nonterminal MethodDeclaration methodDeclaration;
nonterminal IdeDeclaration memberDeclaration;
nonterminal JooSymbol modifier;
nonterminal ArrayList modifiers;
nonterminal CommaSeparatedList nonEmptyArguments;
nonterminal Parameters nonEmptyParameters;
nonterminal CommaSeparatedList nonEmptyObjectFields;
nonterminal ObjectField objectField;
nonterminal CommaSeparatedList objectFields;
nonterminal CommaSeparatedList nonEmptyAnnotationFields;
nonterminal ObjectField annotationField;
nonterminal CommaSeparatedList annotationFields;
nonterminal ObjectLiteral objectLiteral;
nonterminal Statement optBody;
nonterminal ArrayList optCatches;
nonterminal Expr optCommaExpr;
nonterminal JooSymbol optConst;
nonterminal Expr optExprOrObjectLiteral;
nonterminal Ide optIde;
nonterminal Initializer optInitializer;
nonterminal TypeRelation optTypeRelation;
nonterminal PackageDeclaration packageDeclaration;
nonterminal Parameter parameter;
nonterminal Parameters parameters;
nonterminal ParenthesizedExpr parenthesizedExpr;
nonterminal Ide qualifiedIde;
nonterminal Ide namespacedIde;
nonterminal Statement statement;
nonterminal Statement labelableStatement;
nonterminal ArrayList statements;
nonterminal Statement statementInSwitch;
nonterminal StaticInitializer staticInitializer;
nonterminal ArrayList statementsInSwitch;
nonterminal TypeRelation typeRelation;
nonterminal Type type;
nonterminal CommaSeparatedList typeList;
nonterminal VariableDeclaration variableDeclaration;
nonterminal VariableDeclaration optNextVariableDeclaration;

// TODO: check precedences with spec; they are from reference http://hell.org.ua/Docs/oreilly/web2/action/ch05_01.htm
/* 1 */
precedence left COMMA;
/* 2 */
precedence right EQ, MULTEQ, DIVEQ, MODEQ, PLUSEQ, MINUSEQ, LSHIFTEQ, RSHIFTEQ, URSHIFTEQ, ANDEQ, XOREQ, OREQ;
/* 3 */
precedence right QUESTION, COLON;
/* 4 */
precedence left  OROR;
/* 5 */
precedence left  ANDAND;
/* 6 */
precedence left  OR;
/* 7 */
precedence left  XOR;
/* 8 */
precedence left  AND;
/* 9 */
precedence left  EQEQ, NOTEQ, EQEQEQ, NOTEQEQ;
/* 10 */
precedence left LT, LTEQ, GT, GTEQ;
precedence left INSTANCEOF, IS, IN;
precedence left AS;
/* 11 */
precedence left LSHIFT, RSHIFT, URSHIFT;
/* 12 */
precedence left PLUS, MINUS;
/* 13 */
precedence left MUL, DIV, MOD;
/* 14 */
precedence right PREFIX_PLUSPLUS, PREFIX_MINUSMINUS, PREFIX_PLUS, PREFIX_MINUS,
                 BITNOT, NOT, NEW, DELETE, TYPEOF, VOID;
/* 15 */
precedence left DOT, LPAREN, LBRACK, LBRACE;
/* 16 */
precedence left PLUSPLUS, MINUSMINUS; /* postfix */
precedence right NAMESPACESEP;

start with compilationUnit;

arguments ::=
    {: RESULT = null; :}
  | nonEmptyArguments:args
    {: RESULT = args; :}
  ;

arrayLiteral ::=
    LBRACK:lb arguments:args RBRACK:rb
    {: RESULT = new ParenthesizedExpr(lb,args,rb); :}
  ;

block ::=
    LBRACE:lb statements:s RBRACE:rb
    {: RESULT = new BlockStatement(lb,s,rb); :}
  ;

catches ::=
    catchClause:c
    {: RESULT = new ArrayList(1); RESULT.add(c); :}
  |  catches:l catchClause:c
    {: RESULT = l; l.add(c); :}
  ;

catchClause ::=
    CATCH:c LPAREN:lp parameter:p RPAREN:rp block:b
    {: RESULT = new Catch(c,lp,p,rp,b); :}
  ;

classBody ::=
    LBRACE:lb classBodyDeclarations:decls RBRACE:rb
    {: RESULT = new ClassBody(lb, decls, rb); :}
  ;

classBodyDeclarations ::=
    {: RESULT = new ArrayList(); :}
  | classBodyDeclarations:list directive:d
    {: RESULT = list; list.add(d); :}
  | classBodyDeclarations:list	classBodyDeclaration:decl
    {: RESULT = list; list.add(decl); :}
  ;

classBodyDeclaration ::=
    memberDeclaration:decl
    {: RESULT = decl; :}
  | staticInitializer:decl
    {: RESULT = decl; :}
  ;

classDeclaration ::=
    modifiers:m CLASS:c ide:ide extends:e implements:i classBody:b
    {: RESULT = new ClassDeclaration((JooSymbol[])m.toArray(new JooSymbol[0]),c,ide,e,i,b); :}
  | modifiers:m INTERFACE:i ide:ide interfaceExtends:ie classBody:b
    {: RESULT = new ClassDeclaration((JooSymbol[])m.toArray(new JooSymbol[0]),i,ide,null,ie,b); :}
  ;

commaExpr ::=
    expr:e
    {: RESULT = e; :}
  | expr:e1 COMMA:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  ;

compilationUnit ::=
    packageDeclaration:p LBRACE:lb optDirectives:ds compilationUnitDeclaration:c RBRACE:rb
    {: RESULT = new CompilationUnit(p,lb,ds,c,rb); :}
  ;

compilationUnitDeclaration ::=
    classDeclaration:cd
    {: RESULT = cd; :}
/*
  | modifiers:m ide:namespace ide:ide EQ:eq STRING_LITERAL:l SEMICOLON:s
    {: RESULT = new FieldDeclaration((JooSymbol[])m.toArray(new JooSymbol[0]), namespace, ide, null, new Initializer(eq, new LiteralExpr(l)), s); :}
*/
  | memberDeclaration:md
    {: RESULT = md; :}
  ;

constOrVar ::=
    CONST:c
    {: RESULT = c; :}
  | VAR:v
    {: RESULT = v; :}
  ;

directive ::=
    IMPORT:i qualifiedIde:ide
    {: RESULT = new ImportDirective(i,new IdeType(ide)); :}
  | IMPORT:i qualifiedIde:ide DOT:dot MUL:all
    {: RESULT = new ImportDirective(i,new IdeType(new QualifiedIde(ide,dot,all))); :}
  | LBRACK:lb ide:ide RBRACK:rb
    {: RESULT = new Annotation(lb, ide, rb); :}
  | LBRACK:lb ide:ide LPAREN:lb2 annotationFields:af RPAREN:rb2 RBRACK:rb
    {: RESULT = new Annotation(lb, ide, lb2, af, rb2, rb); :}
  | USE:u ide:n qualifiedIde:namespace
    {: RESULT = new UseNamespaceDirective(u, n.ide, namespace); :}
  | SEMICOLON:s
    {: RESULT = new EmptyDeclaration(s); :}
  ;

nonEmptyAnnotationFields ::=
    annotationField:f
    {: RESULT = new CommaSeparatedList(f); :}
  | annotationField:f COMMA:c nonEmptyAnnotationFields:tail
    {: RESULT = new CommaSeparatedList(f, c, tail); :}
  ;

annotationField ::=
    ide:name EQ:eq expr:value
    {: RESULT = new ObjectField(new IdeExpr(name),eq,value); :}
  | expr:value
    {: RESULT = new ObjectField(null,null,value); :}
  ;

annotationFields ::=
    {: RESULT = null; :}
  | nonEmptyAnnotationFields:f
    {: RESULT = f; :}
  ;

optDirectives ::=
    {: RESULT = new ArrayList(); :}
  | directive:d optDirectives:ds
    {: RESULT = ds; RESULT.add(0,d); :}
  ;

expr ::=
    INT_LITERAL:l
    {: RESULT = new LiteralExpr(l); :}
  | FLOAT_LITERAL:l
    {: RESULT = new LiteralExpr(l); :}
  | BOOL_LITERAL:l
    {: RESULT = new LiteralExpr(l); :}
  | STRING_LITERAL:l
    {: RESULT = new LiteralExpr(l); :}
  | REGEXP_LITERAL:l
    {: RESULT = new LiteralExpr(l); :}
  | NULL_LITERAL:l
    {: RESULT = new LiteralExpr(l); :}
  | arrayLiteral:v
    {: RESULT = v; :}
  | lvalue:v
    {: RESULT = v; :}
  | anonFunctionExpr:e
    {: RESULT = e; :}
  | THIS:t
    {: RESULT = new ThisExpr(t); :}
  | parenthesizedExpr:e
    {: RESULT = e; :}
  | NEW:n expr:t
    {: RESULT = new NewExpr(n,t); :}
  | PLUSPLUS:op expr:e
    {: RESULT = new PrefixOpExpr(op,e); :} %prec PREFIX_PLUSPLUS
  | MINUSMINUS:op expr:e
    {: RESULT = new PrefixOpExpr(op,e); :} %prec PREFIX_MINUSMINUS
  | PLUS:op expr:e
    {: RESULT = new PrefixOpExpr(op,e); :} %prec PREFIX_PLUS
  | MINUS:op expr:e
    {: RESULT = new PrefixOpExpr(op,e); :} %prec PREFIX_MINUS
  | NOT:op expr:e
    {: RESULT = new PrefixOpExpr(op,e); :}
  | BITNOT:op expr:e
    {: RESULT = new PrefixOpExpr(op,e); :}
  | TYPEOF:op expr:e
    {: RESULT = new PrefixOpExpr(op,e); :}
  | DELETE:op expr:e
    {: RESULT = new PrefixOpExpr(op,e); :}
  | expr:expr LPAREN:lp arguments:args RPAREN:rp
    {: RESULT = new ApplyExpr(expr,lp,args,rp); :}
  | expr:e AS:as type:t
    {: RESULT = e; :}
  | expr:e1 IS:is expr:e2
    {: RESULT = new IsExpr(e1,is,e2); :}
  | expr:e PLUSPLUS:op
    {: RESULT = new PostfixOpExpr(op,e); :}
  | expr:e MINUSMINUS:op
    {: RESULT = new PostfixOpExpr(op,e); :}
  | expr:e1 MUL:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 DIV:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 MOD:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 PLUS:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 MINUS:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 LSHIFT:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 RSHIFT:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 URSHIFT:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 LT:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 GT:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 LTEQ:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 GTEQ:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 INSTANCEOF:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 EQEQ:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 NOTEQ:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 EQEQEQ:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 NOTEQEQ:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 AND:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 XOR:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 OR:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 ANDAND:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 OROR:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 IN:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | lvalue:lv EQ:op exprOrObjectLiteral:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv MULTEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv DIVEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv MODEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv PLUSEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv MINUSEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv LSHIFTEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv RSHIFTEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv URSHIFTEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv ANDEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv XOREQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv OREQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | expr:cond QUESTION:q exprOrObjectLiteral:e1 COLON:c exprOrObjectLiteral:e2
    {: RESULT = new ConditionalExpr(cond,q,e1,c,e2); :}
  ;

exprOrObjectLiteral ::=
    expr:e
    {: RESULT = e; :}
  | objectLiteral:e
    {: RESULT = e; :}
  | namedFunctionExpr:e
    {: RESULT = e; :}
  ;


extends ::=
    {: RESULT = null; :}
  |
    EXTENDS:e type:t
    {: RESULT = new Extends(e,t); :}
  ;

interfaceExtends ::=
    {: RESULT = null; :}
  | EXTENDS:i typeList:l
    {: RESULT = new Implements(i,l); :}
  ;

fieldDeclaration ::=
    modifiers:m constOrVar:cov ide:ide optTypeRelation:t optInitializer:init optNextFieldDeclaration:nf SEMICOLON:s
    {: RESULT = new FieldDeclaration((JooSymbol[])m.toArray(new JooSymbol[0]), cov, ide, t, init, nf, s); :}
  ;

optNextFieldDeclaration ::=
    {: RESULT = null; :}
  | COMMA:c ide:ide optTypeRelation:t optInitializer:init optNextFieldDeclaration:nf
    {: RESULT = new FieldDeclaration(new JooSymbol[0], c, ide, t, init, nf, null); :}
  ;

anonFunctionExpr ::=
    FUNCTION:f LPAREN:lp parameters:params RPAREN:rp optTypeRelation:t block:b
    {: RESULT = new FunctionExpr(f,null,lp,params,rp,t,b); :}
  ;

namedFunctionExpr ::=
    FUNCTION:f ide:ide LPAREN:lp parameters:params RPAREN:rp optTypeRelation:t block:b
    {: RESULT = new FunctionExpr(f,ide,lp,params,rp,t,b); :}
  ;

ide ::=
    IDE:ide
    {: RESULT = new Ide(ide); :}
  ;

implements ::=
    {: RESULT = null; :}
  | IMPLEMENTS:i typeList:l
    {: RESULT = new Implements(i,l); :}
  ;

lvalue ::=
    namespacedIde:ide
    {: RESULT = new TopLevelIdeExpr(ide); :}
  | expr:e DOT:d namespacedIde:ide
    {: RESULT = new DotExpr(e,d,ide); :}
  | SUPER:s DOT:d namespacedIde:ide
    {: RESULT = new DotExpr(new SuperExpr(s),d,ide); :}
  | expr:expr LBRACK:lb commaExpr:index RBRACK:rb
    {: RESULT = new ArrayIndexExpr(expr,lb,index,rb); :}
  ;

memberDeclaration ::=
    fieldDeclaration:decl
    {: RESULT = decl; :}
  | methodDeclaration:decl
    {: RESULT = decl; :}
  ;

methodDeclaration ::=
    modifiers:m FUNCTION:f IDE:getOrSet ide:ide LPAREN:lp parameters:params RPAREN:rp optTypeRelation:t optBody:b
    {: RESULT = new MethodDeclaration((JooSymbol[])m.toArray(new JooSymbol[0]),f,getOrSet,ide,lp,params,rp,t,b); :}
  | modifiers:m FUNCTION:f ide:ide LPAREN:lp parameters:params RPAREN:rp optTypeRelation:t optBody:b
    {: RESULT = new MethodDeclaration((JooSymbol[])m.toArray(new JooSymbol[0]),f,ide,lp,params,rp,t,b); :}
  ;

modifier ::=
    PUBLIC:s
    {: RESULT = s; :}
  | PROTECTED:s
    {: RESULT = s; :}
  | PRIVATE:s
    {: RESULT = s; :}
  | INTERNAL:s
    {: RESULT = s; :}
  /* syntactic keyword modifier or a namespace: */
  | ide:ide
    {: RESULT = ide.ide; :}
  ;

modifiers ::=
    {: RESULT = new ArrayList(); :}
  | modifier:m modifiers:list
    {: RESULT = list; list.add(0, m); :}
  ;

nonEmptyArguments ::=
    exprOrObjectLiteral:arg
    {: RESULT = new CommaSeparatedList(arg); :}
  | exprOrObjectLiteral:arg COMMA:c nonEmptyArguments:args
    {: RESULT = new CommaSeparatedList(arg,c,args); :}
  ;

nonEmptyParameters ::=
    parameter:param
    {: RESULT = new Parameters(param); :}
  | REST:rest ide:ide optTypeRelation:t
    {: RESULT = new Parameters(new Parameter(rest,ide,t,null)); :}
  | parameter:param COMMA:c nonEmptyParameters:params
    {: RESULT = new Parameters(param, c, params); :}
  ;

nonEmptyObjectFields ::=
    objectField:f
    {: RESULT = new CommaSeparatedList(f); :}
  | objectField:f COMMA:c nonEmptyObjectFields:tail
    {: RESULT = new CommaSeparatedList(f, c, tail); :}
  ;

objectField ::=
    ide:name COLON:c exprOrObjectLiteral:value
    {: RESULT = new ObjectField(new IdeExpr(name),c,value); :}
  | STRING_LITERAL:l COLON:c exprOrObjectLiteral:value
    {: RESULT = new ObjectField(new LiteralExpr(l),c,value); :}
  | INT_LITERAL:l COLON:c exprOrObjectLiteral:value
    {: RESULT = new ObjectField(new LiteralExpr(l),c,value); :}
  ;

objectFields ::=
    {: RESULT = null; :}
  | nonEmptyObjectFields:f
    {: RESULT = f; :}
  ;

objectLiteral ::=
    LBRACE:lb objectFields:fields RBRACE:rb
    {: RESULT = new ObjectLiteral(lb,fields,rb); :}
  ;

optBody ::=
    block:b
    {: RESULT = b; :}
  | SEMICOLON:s
    {: RESULT = new SemicolonTerminatedStatement(s); :}
  ;

optCatches ::=
    {: RESULT = new ArrayList(); :}
  | catches:c
    {: RESULT = c; :}
  ;

optCommaExpr ::=
    {: RESULT = null; :}
  | commaExpr:e
    {: RESULT = e; :}
  ;

optConst ::=
  | CONST
  ;

optExprOrObjectLiteral ::=
    {: RESULT = null; :}
  | exprOrObjectLiteral:e
    {: RESULT = e; :}
  ;

optIde ::=
    {: RESULT = null; :}
  | ide:ide
    {: RESULT = ide; :}
  ;

optInitializer ::=
    {: RESULT = null; :}
  | EQ:eq exprOrObjectLiteral:expr
    {: RESULT = new Initializer(eq,expr); :}
  ;

optTypeRelation ::=
    {: RESULT = null; :}
  | typeRelation:t
    {: RESULT = t; :}
  ;

packageDeclaration ::=
    PACKAGE:p
    {: RESULT = new PackageDeclaration(p,null); :}
  | PACKAGE:p qualifiedIde:qide
    {: RESULT = new PackageDeclaration(p,qide); :}
  ;

parameter ::=
    optConst:oc ide:ide optTypeRelation:t optInitializer:init
    {: RESULT = new Parameter(oc,ide,t,init); :}
  ;

parameters ::=
    {: RESULT = null; :}
  | nonEmptyParameters:params
    {: RESULT = params; :}
  ;

parenthesizedExpr ::=
    LPAREN:lp exprOrObjectLiteral:e RPAREN:rp
    {: RESULT = new ParenthesizedExpr(lp,e,rp); :}
  ;

qualifiedIde ::=
    ide:ide
    {: RESULT = ide; :}
  | qualifiedIde:prefix DOT:d IDE:ide
    {: RESULT = new QualifiedIde(prefix, d, ide); :}
  ;

namespacedIde ::=
    ide:ide
    {: RESULT = ide; :}
  | modifier:namespace NAMESPACESEP:sep IDE:ide
    {: RESULT = new NamespacedIde(namespace, sep, ide); :}
  ;

labelableStatement ::=
    IF:i parenthesizedExpr:cond statement:ts ELSE:e statement:es
    {: RESULT = new IfStatement(i,cond,ts,e,es); :}
  | IF:i parenthesizedExpr:cond statement:ts
    {: RESULT = new IfStatement(i,cond,ts); :}
  | SWITCH:sw parenthesizedExpr:expr LBRACE:lb statementsInSwitch:s RBRACE:rb
    {: RESULT = new SwitchStatement(sw,expr,lb,s,rb); :}
  | WHILE:w parenthesizedExpr:e statement:s
    {: RESULT = new WhileStatement(w,e,s); :}
  | DO:d statement:s WHILE:w parenthesizedExpr:e SEMICOLON:sc
    {: RESULT = new DoStatement(d,s,w,e,sc); :}
  | FOR:f LPAREN:lp SEMICOLON:s1 optCommaExpr:e1 SEMICOLON:s2 optCommaExpr:e2 RPAREN:rp statement:s
    {: RESULT = new ForStatement(f,lp,null,s1,e1,s2,e2,rp,s); :}
  | FOR:f LPAREN:lp commaExpr:e SEMICOLON:s1 optCommaExpr:e1 SEMICOLON:s2 optCommaExpr:e2 RPAREN:rp statement:s
    {: RESULT = new ForStatement(f,lp,new ForInitializer(e),s1,e1,s2,e2,rp,s); :}
  | FOR:f LPAREN:lp VAR:var ide:ide optTypeRelation:t optInitializer:init optNextVariableDeclaration:nv SEMICOLON:s1 optCommaExpr:e1 SEMICOLON:s2 optCommaExpr:e2 RPAREN:rp statement:s
    {: RESULT = new ForStatement(f,lp,new ForInitializer(new VariableDeclaration(var,ide,t,init, nv)),s1,e1,s2,e2,rp,s); :}
  | FOR:f LPAREN:lp ide:ide IN:in expr:e RPAREN:rp statement:s
    {: RESULT = new ForInStatement(f,null,lp,ide,in,e,rp,s); :}
  | FOR:f LPAREN:lp VAR:var ide:ide optTypeRelation:t IN:in expr:e RPAREN:rp statement:s
    {: RESULT = new ForInStatement(f,null,lp,new VariableDeclaration(var,ide,t,null),in,e,rp,s); :}
  | FOR:f IDE:each LPAREN:lp ide:ide IN:in expr:e RPAREN:rp statement:s
    {: RESULT = new ForInStatement(f,each,lp,ide,in,e,rp,s); :}
  | FOR:f IDE:ea LPAREN:lp VAR:var ide:ide optTypeRelation:t IN:in expr:e RPAREN:rp statement:s
    {: RESULT = new ForInStatement(f,ea,lp,new VariableDeclaration(var,ide,t,null),in,e,rp,s); :}
  | TRY:t block:b catches:c
    {: RESULT = new TryStatement(t,b,c); :}
  | TRY:t block:b optCatches:c FINALLY:f block:fb
    {: RESULT = new TryStatement(t,b,c,f,fb); :}
  | block:b
    {: RESULT = b; :}
  | namedFunctionExpr:f
    {: RESULT = new FunctionStatement(f); :}
  ;

statement ::=
    SEMICOLON:s
    {: RESULT = new SemicolonTerminatedStatement(s); :}
  | commaExpr:e SEMICOLON:s
    {: RESULT = new SemicolonTerminatedStatement(e,s); :}
  | ide:ide COLON:c labelableStatement:s
    {: RESULT = new LabeledStatement(ide,c,s); :}
  | variableDeclaration:decl SEMICOLON:s
    {: RESULT = new SemicolonTerminatedStatement(decl, s); :}
  | BREAK:b optIde:ide SEMICOLON:s
    {: RESULT = new BreakStatement(b,ide,s); :}
  | CONTINUE:c optIde:ide SEMICOLON:s
    {: RESULT = new ContinueStatement(c,ide,s); :}
  | RETURN:r optExprOrObjectLiteral:e SEMICOLON:s
    {: RESULT = new ReturnStatement(r,e,s); :}
  | THROW:t commaExpr:e SEMICOLON:s
    {: RESULT = new ThrowStatement(t,e,s); :}
  | SUPER:s LPAREN:lp arguments:args RPAREN:rp
    {: RESULT = new SuperConstructorCallStatement(s,lp,args,rp); :}
  | labelableStatement:s
    {: RESULT = s; :}
  ;

statements ::=
    {: RESULT = new ArrayList(); :}
  | statements:l statement:s
    {: RESULT = l; l.add(s); :}
  ;

statementInSwitch ::=
    statement:s
    {: RESULT = s; :}
  | CASE:cs expr:e COLON:col
    {: RESULT = new CaseStatement(cs,e,col); :}
  | DEFAULT:d COLON:col
    {: RESULT = new DefaultStatement(d,col); :}
  ;

statementsInSwitch ::=
    {: RESULT = new ArrayList(); :}
  | statementsInSwitch:l statementInSwitch:s
    {: RESULT = l; l.add(s); :}
  ;

staticInitializer ::=
    block:b
    {: RESULT = new StaticInitializer(b); :}
  ;

type ::=
    qualifiedIde:ide
    {: RESULT = new IdeType(ide); :}
  | MUL:any
    {: RESULT = new VoidType(any); :}
  | VOID:v
    {: RESULT = new VoidType(v); :}
  ;

typeList ::=
    type:t
    {: RESULT = new CommaSeparatedList(t); :}
  | type:t COMMA:c typeList:l
    {: RESULT = new CommaSeparatedList(t,c,l); :}
  ;

typeRelation ::=
    COLON:s type:t
    {: RESULT = new TypeRelation(s,t); :}
  ;

variableDeclaration ::=
    constOrVar:cov ide:ide optTypeRelation:t optInitializer:init optNextVariableDeclaration:nv
    {: RESULT = new VariableDeclaration(cov,ide,t,init, nv); :}
  ;

optNextVariableDeclaration ::=
    {: RESULT = null; :}
  | COMMA:c ide:ide optTypeRelation:t optInitializer:init optNextVariableDeclaration:nv
    {: RESULT = new VariableDeclaration(c, ide, t, init, nv); :}
  ;
