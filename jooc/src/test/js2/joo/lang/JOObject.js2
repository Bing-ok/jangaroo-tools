package joo.lang {
public class JOObject {

  private static var idCnt : Number = 0;

  private static const INIT : void = function() : void {
    // patching Array to have a unique hashCode:
    Array.prototype["hashCode"] = joo.lang.JOObject.prototype.hashCode;
  };

  public static function getHashCode(obj : *) : String {
    return obj && typeof obj.hashCode=="function" ? obj.hashCode() : "_"+obj;
    /*
    // for debugging expensive hashCodes:
    switch(typeof obj) {
      case "object":
        if (typeof obj.hashCode=="function")
          return obj.hashCode();
        return "_"+obj;
      case "string":
        return "_"+obj;
      case "undefined":
        return "_"+obj;
      case "number":
        return "_"+obj;
    }
    return "_"+obj;
    */
  }

  public static function equal(o1 : *, o2 : *) : Boolean {
    return o1===o2 || o1 && typeof o1.equals=="function" && o1.equals(o2);
  }

  public static function toJsonString(json : *) : String {
    switch (typeof json) {
      case "string":
        return '"' + json.replace(/(["\\])/g, "\\$1") + '"';
      case "object":
        if (json===null) {
          return "null";
        }
        if (json.constructor==Array) {
          return '[' + json.map(toJsonString).join(',') + ']';
        }
        var string : Array = [];
        for (var property : String in json) {
          string.push(toJsonString(property) + ':' + toJsonString(json[property]));
        }
        return '{' + string.join(',') + '}';
      case "undefined":
        return "undefined";
      case "number":
        if (!isFinite(json))
          return "null";
    }
    return String(json);
  }

  private static const JSON_REG_EXP : RegExp = /^("(\\.|[^"\\\n\r])*?"|[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t])+?$/;
  /**
    Converts a json string to an javascript Object.

    @param str the string to evaluate. if its not a string, it returns false.
    @param secure optionally, performs syntax check on json string. Defaults to false.

  Credits:
    Json test regexp is by Douglas Crockford <http://crockford.org>.

  Example:
    var myObject = Json.evaluate('{"apple":"red","lemon":"yellow"}');
    //myObject will become {apple: "red", lemon: "yellow"}
  */
  public static function fromJsonString(str : String, secure : Boolean) : * {
    return ((typeof str != "string") || (secure && !JSON_REG_EXP.test(str))) ? null : eval('(' + str + ')');
  }

  public static function toJsonObject(obj : *) : * {
    return new joo.lang.JsonBuilder().toJsonObject(obj);
  }

  public static function fromJsonObject(json : *) : * {
    return new joo.lang.JsonBuilder().fromJsonObject(json);
  }

  public function JOObject() {
  }

  public function getClass() : Function {
    return this["constructor"];
  }

  public function hashCode() : String {
    return this["0id"] || (this["0id"]="_"+(idCnt++));
  }

  public function equals(joobject : JOObject) : Boolean {
    return this===joobject;
  }

  public function toJson() : Object {
    return new joo.lang.JsonBuilder().toJsonObject(this);
  }

  protected function addPropertiesToJson(result : Object, jsonBuilder : JsonBuilder) : void {
    const noPredicate : Boolean = typeof this.isJsonProperty!="function";
    for (var property : String in this) {
      if (property!="_pcl" && (noPredicate || this.isJsonProperty(property))) {
        result[property] = jsonBuilder.toJsonObject(this[property]);
      }
    }
  }

  protected function isJsonProperty(property : String) : Boolean {
    var value : * = this[property];
    return typeof value!="function" && value !== this.getClass().prototype[property];
  }

  public function fromJson(json : Object) : void {
    this.addPropertiesFromJson(json, new joo.lang.JsonBuilder());
  }

  protected function addPropertiesFromJson(json : Object, jsonBuilder : JsonBuilder) : void {
    // recurse into object properties:
    for (var property : String in json) {
      if (property.charAt(0)!='$') {
        this[property] = jsonBuilder.fromJsonObject(json[property]);
      }
    }
  }

  public function initFrom(props : *) {
    joo.util.PropertyAware_().setProperties(this, props);
  }

  override public function toString() : String {
    return this.getClass()["getName"]()+"@"+this.hashCode();
  }

}
}
