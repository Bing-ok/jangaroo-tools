package joo.lang {
class JsonBuilder {

  function toJsonObject(obj : *) : * {
    if (typeof obj!="object" || obj==null)
      return obj;
    if (obj.constructor==Array) {
      // recurse into array elements:
      var jsonArray : Array = [];
      for (var i : Number = 0; i < obj.length; ++i) {
        jsonArray[i] = this.toJsonObject(obj[i]);
      }
      return jsonArray;
    }
    var json : Object;
    if (typeof obj.addPropertiesToJson=="function") {
      var hashCode : String = obj.hashCode();
      var ref : JOObject = this.visited[hashCode];
      if (ref) {
        var idref : String = ref["$id"];
        if (!idref) {
          idref = ref["$id"] = String(this.idCnt++);
        }
        return { "$idref": idref };
      }
      json = this.visited[hashCode] = { "$class": obj.getClass()["getName"]() };
      obj.addPropertiesToJson(json, this);
      return json;
    }
    // recurse into object properties:
    json = {};
    joo.lang.JOObject.prototype.addPropertiesToJson.call(obj, json, this);
    return json;
  }

  function fromJsonObject(json : *): JOObject {
    if (typeof json!="object" || json==null)
      return json;
    if (json.constructor==Array) {
      // recurse into array elements:
      var array : Array = [];
      for (var i : Number = 0; i < json.length; ++i) {
        array[i] = this.fromJsonObject(json[i]);
      }
      return array;
    }
    var refId : String = json["$idref"];
    if (refId) {
      return this.visited[refId];
    }
    var fullClassName : String = json["$class"];
    if (!fullClassName) {
      var obj : Object = {};
      joo.lang.JOObject.prototype.addPropertiesFromJson.call(obj,json,this);
      return obj;
    }
    var clazz : Function = eval(fullClassName); // TODO: publish and use no-op constructor!
    var joobject : JOObject = new clazz();
    var id : String = json["$id"];
    if (id) {
      this.visited[id] = joobject;
    }
    joobject.addPropertiesFromJson(json, this); // must be called *after* updating "visited"!
    return joobject;
  }

  private const visited : Object = {}; /* map from hashCode to Json object */
  private var idCnt : Number = 1;
}
}
