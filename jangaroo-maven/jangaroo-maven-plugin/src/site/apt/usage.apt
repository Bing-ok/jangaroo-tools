 ------
 Usage
 ------
 Dennis Homann
 ------
 26 September 2008

~~ Copyright 2006 CoreMedia AG
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~      http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/guides/mini/guide-apt-format.html

Usage

 To compile your Jangaroo classes and test classes, add the <<<jangaroo-maven-plugin>>> to your <<<pom.xml>>>
 and register the goals <<<compile>>>, <<<testCompile>>>, and <<<copy-runtime>>> for execution.

+-------+
  <project>
    [...]
    <build>
      <plugins>
        <plugin>
          <groupId>net.jangaroo</groupId>
          <artifactId>jangaroo-maven-plugin</artifactId>
          <version>0.3</version>
          <executions>
            <execution>
              <goals>
                <goal>compile</goal>
                <goal>copy-runtime</goal>
                <goal>testCompile</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </build>
    [...]
  </project>
+-------+

 By default, <<<jangaroo:compile>>> will generate the JavaScript output to <<<target/joo/classes>>>, and
 <<<jangaroo:testCompile>>> to <<<target/joo/test-classes>>>. The <<<jangaroo:copy-runtime>>> goal will run during
 the compile phase and extract the required Jangaroo runtime <<<joo/joo.js>>> to the compilation output directory.

*Including compiled Jangaroo classes in a <<<war>>> project

 In most cases, Jangaroo sources will be part of a project of type <<<war>>>, packaged by the <<<maven-war-plugin>>>.
 To include the compiled Jangaroo classes in the generated WAR, e.g. in a scripts directory called <<</joo>>>,
 add the Jangaroo compilation output directory as a <<<webResource>>> to the war-plugin configuration.
 If you do not actually build a J2EE Web application, and you do not want to add a fake web.xml, you must tell the
 maven-war-plugin to ignore the missing file.

+-------+
  <project>
    [...]
    <build>
      <plugins>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>2.1-alpha-2</version>
          <configuration>
            <webResources>
              <resource>
                <directory>${project.build.directory}/joo</directory>
                <targetPath>joo</targetPath>
              </resource>
            </webResources>
            <failOnMissingWebXml>false</failOnMissingWebXml>
          </configuration>
        </plugin>
      </plugins>
    </build>
    [...]
  </project>
+-------+

 The Jangaroo runtime <<<joo/joo.js>>> will be required to run the compiled Jangaroo code. The example
 above therefore assumes that the <<<jangaroo:copy-runtime>>> goal has been executed to extract <<<joo.js>>>
 to <<<$\{project.build.directory\}/joo/lib>>>.

*Compiling all Jangaroo classes to one output file

 To reduce the number of JavaScript files in your deployed application, the plugin supports concatenating all
 compiled Jangaroo classes to one single JavaScript file by setting the <<<mergeOutput>>> parameter to true.
 The default output file name is <<<target/joo/lib/$\{project.build.finalName\}.js>>> and may be changed by setting the
 <<<outputFileName>>> parameter.

+-------+
  <project>
    [...]
    <build>
      <plugins>
        <plugin>
          <groupId>net.jangaroo</groupId>
          <artifactId>jangaroo-maven-plugin</artifactId>
          <version>0.3</version>
          <executions>
            <execution>
              <configuration>
                <mergeOutput>true</mergeOutput>
              </configuration>
              <goals>
                <goal>compile</goal>
                <goal>copy-runtime</goal>
                <goal>testCompile</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </build>
    [...]
  </project>
+-------+
