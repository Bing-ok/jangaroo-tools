package net.jangaroo.jooc.mvnplugin;

@SuppressWarnings("FieldCanBeLocal")
public class SenchaConfiguration extends SenchaProfileConfiguration {

  public enum Type {
    CODE,
    THEME,
    APP,
    WORKSPACE
  }

  /**
   * Set this to <code>true</code> to generate sencha files (workspace, package, app).
   *
   * @parameter default-value="true"
   */
  private boolean enabled = true;

  /**
   * Adjust the sencha type generated by the plugin.
   *
   * @parameter default-value="CODE"
   */
  private Type type = Type.CODE;

  /**
   * Only relevant if type is not {@link Type#WORKSPACE}.
   *
   * Defines if the module will be generated using an temporary workspace. The workspace will be deleted after build.
   *
   * @parameter default-value="false"
   */
  private boolean temporaryWorkspace = false;

  /**
   * The toolkit to use
   *
   * @parameter default-value="classic"
   */
  private String toolkit = "classic";

  /**
   * The theme to use
   *
   * @parameter default-value=""
   */
  private String theme = "";

  /**
   * The sass namespace to use
   *
   * @parameter default-value="Ext"
   */
  private String sassNamespace = "Ext";

  /**
   * @parameter default-value="${production}"
   */
  private SenchaProfileConfiguration production;

  /**
   * @parameter default-value="${development}"
   */
  private SenchaProfileConfiguration development;

  /**
   * @parameter default-value="${testing}"
   */
  private SenchaProfileConfiguration testing;

  /**
   * Ext Framework directory for the module.
   *
   * @parameter default-value="ext"
   */
  private String extFrameworkDir = "ext";

  /**
   * Build directory relative to baseDir
   *
   * @parameter default-value="build"
   */
  private String buildDir = "build";

  /**
   * Packages directory relative to baseDir
   *
   * @parameter default-value="packages"
   */
  private String packagesDir = "packages";

  /**
   * Skip the build process of the sencha module.
   *
   * Only use this for local development to speed up the build process of the maven app.
   * For deployment the build process is required otherwise remote packages will have no contents.
   *
   * @parameter default-value="false"
   */
  private boolean skipBuild = false;

  /**
   * Only applies if type is {@link Type#APP}, {@link Type#CODE} or {@link Type#THEME}.
   *
   * Specifies if scss paths should map to the maven projects base sencha folder instead of to the generated module.
   *
   * Included paths:
   * - sass.etc
   * - sass.var
   * - sass.src
   *
   * When performaing packaging these paths will be removed temporarily as packages modules may not contain relative
   * paths outside the generated module folder.
   *
   * @parameter default-value="false"
   */
  private boolean scssFromSrc = false;

  public boolean isEnabled() {
    return enabled;
  }

  public Type getType() {
    return type;
  }

  public boolean isTemporaryWorkspace() {
    return temporaryWorkspace;
  }

  public String getToolkit() {
    return toolkit;
  }

  public String getTheme() {
    return theme;
  }

  public String getSassNamespace() {
    return sassNamespace;
  }

  public SenchaProfileConfiguration getProduction() {
    return production;
  }

  public SenchaProfileConfiguration getDevelopment() {
    return development;
  }

  public SenchaProfileConfiguration getTesting() {
    return testing;
  }

  public String getExtFrameworkDir() {
    return extFrameworkDir;
  }

  public String getBuildDir() {
    return buildDir;
  }

  public String getPackagesDir() {
    return packagesDir;
  }

  public boolean isSkipBuild() {
    return skipBuild;
  }

  public boolean isScssFromSrc() {
    return scssFromSrc;
  }

  public void setEnabled(boolean enabled) {
    this.enabled = enabled;
  }

  public void setType(Type type) {
    this.type = type;
  }

  public void setTemporaryWorkspace(boolean temporaryWorkspace) {
    this.temporaryWorkspace = temporaryWorkspace;
  }

  public void setToolkit(String toolkit) {
    this.toolkit = toolkit;
  }

  public void setTheme(String theme) {
    this.theme = theme;
  }

  public void setSassNamespace(String sassNamespace) {
    this.sassNamespace = sassNamespace;
  }

  public void setProduction(SenchaProfileConfiguration production) {
    this.production = production;
  }

  public void setDevelopment(SenchaProfileConfiguration development) {
    this.development = development;
  }

  public void setTesting(SenchaProfileConfiguration testing) {
    this.testing = testing;
  }

  public void setExtFrameworkDir(String extFrameworkDir) {
    this.extFrameworkDir = extFrameworkDir;
  }

  public void setBuildDir(String buildDir) {
    this.buildDir = buildDir;
  }

  public void setPackagesDir(String packagesDir) {
    this.packagesDir = packagesDir;
  }

  public void setSkipBuild(boolean skipBuild) {
    this.skipBuild = skipBuild;
  }

  public void setScssFromSrc(boolean scssFromSrc) {
    this.scssFromSrc = scssFromSrc;
  }
}
