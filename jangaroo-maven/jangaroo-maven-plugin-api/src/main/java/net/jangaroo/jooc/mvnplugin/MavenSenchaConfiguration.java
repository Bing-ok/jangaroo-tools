package net.jangaroo.jooc.mvnplugin;

import net.jangaroo.jooc.mvnplugin.sencha.SenchaConfiguration;
import net.jangaroo.jooc.mvnplugin.sencha.SenchaProfileConfiguration;
import org.apache.maven.plugins.annotations.Parameter;

@SuppressWarnings("FieldCanBeLocal")
public class MavenSenchaConfiguration extends MavenSenchaProfileConfiguration implements SenchaConfiguration {

  /**
   * Set this to <code>true</code> to generate sencha files (workspace, package, app).
   */
  @Parameter(defaultValue = "true")
  private boolean enabled = true;

  /**
   * Adjust the sencha type generated by the plugin.
   */
  @Parameter(defaultValue = "CODE")
  private Type type = Type.CODE;

  /**
   * Defines if the module will be generated using an temporary workspace. The workspace will be deleted after build.
   * TODO is this really necessary?
   * Ignored for {@link Type#WORKSPACE}
   */
  @Parameter(defaultValue = "false")
  private boolean temporaryWorkspace = false;

  /**
   * The toolkit to use
   *
   * Ignored for {@link Type#WORKSPACE}
   */
  @Parameter(defaultValue = "classic")
  private String toolkit = "classic";

  /**
   * Used for {@link Type#APP} and {@link Type#CODE} to define the theme packages to use.
   * For {@link Type#THEME} it defines the theme package to the theme extends.
   *
   * Ignored for {@link Type#WORKSPACE}
   *
   * When a ":" is found in the provided {@link String} it is assumed that a  maven dependency is used as theme and
   * converted properly.
   */
  @Parameter(defaultValue = "")
  private String theme = "";

  /**
   * Production only configuration
   *
   * Ignored for {@link Type#WORKSPACE}
   */
  @Parameter(defaultValue = "${production}")
  private MavenSenchaProfileConfigurationProduction production;

  /**
   * Testing only configuration.
   *
   * Ignored for {@link Type#WORKSPACE}
   */
  @Parameter(defaultValue = "${testing}")
  private MavenSenchaProfileConfigurationTesting testing;

  /**
   * Development only configuration
   *
   * Ignored for {@link Type#WORKSPACE}
   */
  @Parameter(defaultValue = "${development}")
  private MavenSenchaProfileConfigurationDevelopment development;

  /**
   * For {@link Type#WORKSPACE} defined the Ext Framework directory for the module.
   *
   * Ignored for {@link Type#APP}, {@link Type#CODE} and {@link Type#THEME}
   */
  @Parameter(defaultValue = "${project.build.directory}/ext")
  private String extFrameworkDir = "target/ext";

  /**
   * Build directory relative to baseDir
   */
  @Parameter(defaultValue = "${project.build.directory}/sencha/build", readonly = true)
  private String buildDir = "target/sencha/build";

  /**
   * Packages directory relative to baseDir
   */
  @Parameter(defaultValue = "${project.build.directory}/sencha/packages", readonly = true)
  private String packagesDir = "target/sencha/packages";

  /**
   * Skip the build process of the sencha module.
   *
   * Only use this for local development to speed up the build process of the maven app.
   * For deployment the build process is required otherwise remote packages will have no contents.
   *
   * Ignored for {@link Type#WORKSPACE}
   */
  @Parameter(defaultValue = "false")
  private boolean skipBuild;

  /**
   * For {@link Type#APP}, {@link Type#CODE} and {@link Type#THEME} specifies if scss paths should map to the maven
   * projects base sencha folder instead of to the generated module.
   *
   * Included paths:
   * - sass.etc
   * - sass.var
   * - sass.src
   *
   * When performaing packaging these paths will be removed temporarily as packages modules may not contain relative
   * paths outside the generated module folder.
   *
   * Ignored for {@link Type#WORKSPACE}
   */
  @Parameter(defaultValue = "false")
  private boolean scssFromSrc;

  @Override
  public boolean isEnabled() {
    return enabled;
  }

  @Override
  public Type getType() {
    return type;
  }

  @Override
  public boolean isTemporaryWorkspace() {
    return temporaryWorkspace;
  }

  @Override
  public String getToolkit() {
    return toolkit;
  }

  @Override
  public String getTheme() {
    return theme;
  }

  @Override
  public SenchaProfileConfiguration getProduction() {
    return production;
  }

  @Override
  public SenchaProfileConfiguration getDevelopment() {
    return development;
  }

  @Override
  public SenchaProfileConfiguration getTesting() {
    return testing;
  }

  @Override
  public String getExtFrameworkDir() {
    return extFrameworkDir;
  }

  @Override
  public String getBuildDir() {
    return buildDir;
  }

  @Override
  public String getPackagesDir() {
    return packagesDir;
  }

  @Override
  public boolean isSkipBuild() {
    return skipBuild;
  }

  @Override
  public boolean isScssFromSrc() {
    return scssFromSrc;
  }

  @Override
  public void setEnabled(boolean enabled) {
    this.enabled = enabled;
  }

  @Override
  public void setType(Type type) {
    this.type = type;
  }

  @Override
  public void setTemporaryWorkspace(boolean temporaryWorkspace) {
    this.temporaryWorkspace = temporaryWorkspace;
  }

  @Override
  public void setToolkit(String toolkit) {
    this.toolkit = toolkit;
  }

  @Override
  public void setTheme(String theme) {
    this.theme = theme;
  }

  @Override
  public void setProduction(MavenSenchaProfileConfigurationProduction production) {
    this.production = production;
  }

  @Override
  public void setDevelopment(MavenSenchaProfileConfigurationDevelopment development) {
    this.development = development;
  }

  @Override
  public void setTesting(MavenSenchaProfileConfigurationTesting testing) {
    this.testing = testing;
  }

  @Override
  public void setExtFrameworkDir(String extFrameworkDir) {
    this.extFrameworkDir = extFrameworkDir;
  }

  @Override
  public void setBuildDir(String buildDir) {
    this.buildDir = buildDir;
  }

  @Override
  public void setPackagesDir(String packagesDir) {
    this.packagesDir = packagesDir;
  }

  @Override
  public void setSkipBuild(boolean skipBuild) {
    this.skipBuild = skipBuild;
  }

  @Override
  public void setScssFromSrc(boolean scssFromSrc) {
    this.scssFromSrc = scssFromSrc;
  }
}
