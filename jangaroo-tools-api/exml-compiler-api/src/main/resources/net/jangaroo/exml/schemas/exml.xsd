<?xml version="1.0" encoding="UTF-8"?>
<xs:schema attributeFormDefault="unqualified"
           elementFormDefault="qualified"
           targetNamespace="http://www.jangaroo.net/exml/0.8"
           version="0.8"
           xmlns:exml="http://www.jangaroo.net/exml/0.8"
           xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <xs:simpleType name="expression">
    <xs:restriction base="xs:string">
      <xs:pattern value="\{.*\}"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="String">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>

  <xs:simpleType name="Boolean">
    <xs:union memberTypes="xs:boolean exml:expression"/>
  </xs:simpleType>

  <xs:simpleType name="Number">
    <xs:union memberTypes="xs:float exml:expression"/>
  </xs:simpleType>

  <xs:simpleType name="int">
    <xs:union memberTypes="xs:int exml:expression"/>
  </xs:simpleType>

  <xs:simpleType name="uint">
    <xs:union memberTypes="xs:unsignedInt exml:expression"/>
  </xs:simpleType>

  <xs:simpleType name="Date">
     <xs:restriction base="exml:expression"/>
       <!-- TODO: Currently, only expressions are allowed. Do we want support for date literals? Which format? -->
  </xs:simpleType>

  <xs:simpleType name="identifier">
     <xs:restriction base="xs:string">
        <xs:pattern value="[a-zA-Z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*"/>
     </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="publicApiMode">
     <xs:restriction base="xs:string">
        <xs:enumeration value="false"/>
        <xs:enumeration value="config"/>
        <xs:enumeration value="true"/>
     </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="cfg">
    <xs:annotation>
      <xs:documentation>
        An additional config property of this EXML class. The newly created property can
        be used with binding in other properties of components, e.g. <i><b>{config.&lt;name of the property>}</b></i>
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="description" type="xs:string" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>
            The description of the config property. optional.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          The name of the config property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          The type of the config property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="import">
    <xs:annotation>
      <xs:documentation>
        Imports the specified class into the EXML class. This is necessary when using third-party classes inside code blocks like event handlers. 
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="class" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType name="declaration">
    <xs:sequence>
      <xs:element name="description" type="xs:string" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>
            The description of the constant or variable (optional).
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="name" type="exml:identifier" use="required">
      <xs:annotation>
        <xs:documentation>
          <p>The name of the constant or variable.</p>
          <p>Only letters, numbers and '_' are allowed (Pattern: [a-zA-Z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*).</p>
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          The value of the constant or variable.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>
          The type of the constant or variable. If no type is given, like for untyped config properties,
          it will be guessed from the value. If it cannot be guessed (e.g. because the
          value is an expression), '*' will be used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="object">
    <xs:annotation>
      <xs:documentation>
        Creates an anonymous object. Either with attributes or with JSON as text node.
      </xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:anyAttribute processContents="skip"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="rootElement">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="import" type="exml:import"/>
        <xs:element name="constant" type="exml:declaration">
          <xs:annotation>
            <xs:documentation>
              Defines a static constant that can e.g. be used for itemIds.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="cfg" type="exml:cfg"/>
        <xs:element name="description" type="xs:string">
          <xs:annotation>
            <xs:documentation>
              The description of the new EXML class (optional).
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="var" type="exml:declaration">
          <xs:annotation>
            <xs:documentation>
              Defines a local variable that can be used to refactor expressions that occur multiple times.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
      <xs:any minOccurs="0" maxOccurs="1" namespace="##other" processContents="strict"/>

    </xs:sequence>
    <xs:attribute name="baseClass" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          <p>The name of the base class of this EXML class. <b>The base class must be compatible with the config class of this EXML class.</b></p>
          <p>If the name is not full qualified, either the class has to be imported or the class is assumed to be in the same
          package.</p>
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="publicApi" type="exml:publicApiMode">
      <xs:annotation>
        <xs:documentation>
          <p>Defines the public API status of the generated classes. If <code>true</code>, both the config
            class and the target class are public API. If <code>config</code>, the config class is public API, but the
            target class is excluded. If <code>false</code> (default), neither the config class nor the target class
            are marked as public API.</p>
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:element name="component" type="exml:rootElement">
    <!-- make constant names unique -->
    <xs:unique name="constant_name">
      <xs:selector xpath="exml:constant" />
      <xs:field    xpath="@name" />
    </xs:unique>
    <!-- make config names unique -->
    <xs:unique name="cfg_name">
      <xs:selector xpath="exml:cfg" />
      <xs:field    xpath="@name" />
    </xs:unique>
    <!-- make var names unique -->
    <xs:unique name="var_name">
      <xs:selector xpath="exml:var" />
      <xs:field    xpath="@name" />
    </xs:unique>
  </xs:element>

  <xs:element name="plugin" type="exml:rootElement">
    <!-- make constant names unique -->
    <xs:unique name="constant_name_plugin">
      <xs:selector xpath="exml:constant" />
      <xs:field    xpath="@name" />
    </xs:unique>
    <!-- make config names unique -->
    <xs:unique name="cfg_name_plugin">
      <xs:selector xpath="exml:cfg" />
      <xs:field    xpath="@name" />
    </xs:unique>
    <!-- make var names unique -->
    <xs:unique name="var_name_plugin">
      <xs:selector xpath="exml:var" />
      <xs:field    xpath="@name" />
    </xs:unique>
  </xs:element>

  <xs:element name="layout" type="exml:rootElement">
    <!-- make constant names unique -->
    <xs:unique name="constant_name_layout">
      <xs:selector xpath="exml:constant" />
      <xs:field    xpath="@name" />
    </xs:unique>
    <!-- make config names unique -->
    <xs:unique name="cfg_name_layout">
      <xs:selector xpath="exml:cfg" />
      <xs:field    xpath="@name" />
    </xs:unique>
    <!-- make var names unique -->
    <xs:unique name="var_name_layout">
      <xs:selector xpath="exml:var" />
      <xs:field    xpath="@name" />
    </xs:unique>
  </xs:element>

  <xs:element name="gridColumn" type="exml:rootElement">
    <!-- make constant names unique -->
    <xs:unique name="constant_name_gridColumn">
      <xs:selector xpath="exml:constant" />
      <xs:field    xpath="@name" />
    </xs:unique>
    <!-- make config names unique -->
    <xs:unique name="cfg_name_gridColumn">
      <xs:selector xpath="exml:cfg" />
      <xs:field    xpath="@name" />
    </xs:unique>
    <!-- make var names unique -->
    <xs:unique name="var_name_gridColumn">
      <xs:selector xpath="exml:var" />
      <xs:field    xpath="@name" />
    </xs:unique>
  </xs:element>

  <xs:element name="class" type="exml:rootElement">
    <!-- make constant names unique -->
    <xs:unique name="constant_name_class">
      <xs:selector xpath="exml:constant" />
      <xs:field    xpath="@name" />
    </xs:unique>
    <!-- make config names unique -->
    <xs:unique name="cfg_name_class">
      <xs:selector xpath="exml:cfg" />
      <xs:field    xpath="@name" />
    </xs:unique>
    <!-- make var names unique -->
    <xs:unique name="var_name_class">
      <xs:selector xpath="exml:var" />
      <xs:field    xpath="@name" />
    </xs:unique>
  </xs:element>

  <xs:element name="object" type="exml:object"/>

</xs:schema>
